{
  "address": "0xa0d7406929523EbB6A59fDA9154E22d78C26e6De",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x398f2cce267bb77d1dc2a7b0d82ce1cb81e5e9228c5070b4df9eb0f8d5b98eb5",
  "receipt": {
    "to": null,
    "from": "0xf8cda884C4E9d610f6Aa3478CD01bF31e135c2F4",
    "contractAddress": "0xa0d7406929523EbB6A59fDA9154E22d78C26e6De",
    "transactionIndex": 57,
    "gasUsed": "1136197",
    "logsBloom": "0x
    "blockHash": "0xff44ddb78ac28182078bb2b410d3b429b5f3b2dbc37fd417ad1d84664f563b51",
    "transactionHash": "0x398f2cce267bb77d1dc2a7b0d82ce1cb81e5e9228c5070b4df9eb0f8d5b98eb5",
    "logs": [],
    "blockNumber": 8249373,
    "cumulativeGasUsed": "12440438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "f9d8709a4a780c8776e27e4835646e37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Quentin Diprima\",\"details\":\"the implements s_priceFeed as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crownd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD -> we will need to use an Oracle\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crownd funding\\n *  @author Quentin Diprima\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev the implements s_priceFeed as our library\\n */\\ncontract FundMe {\\n    // Type declaration\\n    using PriceConverter for uint256; // To use the library\\n\\n    // State variable\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // To have the 18 decimals\\n\\n    // To keep who is sending money and how much\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // So that only the contract's owner can call this function\\n        // require(msg.sender == owner, \\\"Sender is not owner!\\\"); -> The solution just below is more gas efficient\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // represents \\\"Do the rest of the code\\\"\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender; // Who ever deployed this contract\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // We want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract ?\\n\\n        // We accept only if the value sent is more than 1ETH\\n        // if the condition is not met, it will revert\\n        // Revert undo any action before, and send remaining gas back. The only gas used is for the code executed before the \\\"require\\\" statement\\n        // require(msg.value > 1e18, \\\"Didn't send enough!\\\"); // 1e18 = 1ETH\\n        // msg.value will be 18 decimals\\n        //require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough!\\\");\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough!\\\"\\n        ); // We don't need to pass the first parameter as it's implicitly msg.value\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        /* starting index; ending index; step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // Reset the array\\n        s_funders = new address[](0);\\n        // Actually withdraw the funds\\n\\n        // There are 3 ways of sending ETh  -> https://solidity-by-example.org/sending-ether/\\n        // 1 - TRANSFER\\n        // msg.sender = address\\n        // paybale(msg.sender) = payable address\\n        payable(msg.sender).transfer(address(this).balance); // if it fails, will return an error and revert the transaction\\n\\n        // 2 - SEND\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n\\n        // 3 - CALL  -> extremlly powerful\\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        // mappings can't be in memory....\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    // What happens if someone sends this contract ETH without calling the fund function ?\\n    // received() -> this special function is called when someone is doing a transaction on our contract without calldata\\n    // fallback() -> this special function is called when someone is doing a transaction on our contract wwith some calldata but it doesn't match a function\\n\\n    // ETH is sent to a contract\\n    //          is msg.data empty ?\\n    //              /   \\\\\\n    //            yes   no\\n    //            /       \\\\\\n    //        receive()?   fallback()\\n    //         /     \\\\\\n    //        yes    no\\n    //        /         \\\\\\n    //    receive()     fallback()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x8e3f8ed75236ba8da1ba169ff711811d90414226dada9e1175e7e0a34854ea1a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // We need the price of the native token. To do so, we will use Chainlink.\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // We need: -> ABI\\n        // We will use the Interface of the contract. We will import it from Github\\n\\n        // We need: -> Address of the contract -> we can get it from the chainlink website -> https://docs.chain.link/data-feeds/price-feeds/addresses\\n        // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // Will get the ETH price in terms of USD with 8 decimals\\n\\n        return uint256(price * 1e10); // To match with msg.value decimals and variable type\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x32258f6d7e3f23caf1ff1e8aaf7cfbd1f0dad232294a7c2572b72b62b17cd421\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014b9380380620014b9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611333620001866000396000818161040f0152818161071f0152818161076f015261096501526113336000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c28565b61031d565b6040516100d79190610c6e565b60405180910390f35b3480156100ec57600080fd5b506100f5610366565b6040516101029190610c6e565b60405180910390f35b34801561011757600080fd5b5061012061040d565b005b34801561012e57600080fd5b5061013761070e565b6040516101449190610c6e565b60405180910390f35b34801561015957600080fd5b5061016261071b565b60405161016f9190610c98565b60405180910390f35b34801561018457600080fd5b5061018d610743565b60405161019a9190610d12565b60405180910390f35b6101ab6101f4565b005b6101b561076d565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610d59565b6109fb565b6040516101eb9190610c98565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a4290919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610de3565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d057600080fd5b505afa1580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190610e18565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610492576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561053d5760008082815481106104b7576104b6610e45565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053590610ea3565b915050610495565b50600067ffffffffffffffff81111561055957610558610eec565b5b6040519080825280602002602001820160405280156105875781602001602082028036833780820191505090505b506000908051906020019061059d929190610b1e565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156105e4573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590610f67565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161068490610fb8565b60006040518083038185875af1925050503d80600081146106c1576040519150601f19603f3d011682016040523d82523d6000602084013e6106c6565b606091505b505090508061070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190611019565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561087557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161082b575b5050505050905060005b815181101561090057600082828151811061089d5761089c610e45565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108f890610ea3565b91505061087f565b50600067ffffffffffffffff81111561091c5761091b610eec565b5b60405190808252806020026020018201604052801561094a5781602001602082028036833780820191505090505b5060009080519060200190610960929190610b1e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109a790610fb8565b60006040518083038185875af1925050503d80600081146109e4576040519150601f19603f3d011682016040523d82523d6000602084013e6109e9565b606091505b50509050806109f757600080fd5b5050565b6000808281548110610a1057610a0f610e45565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a4e83610a7e565b90506000670de0b6b3a76400008583610a679190611039565b610a7191906110c2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ac757600080fd5b505afa158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff919061116b565b5050509150506402540be40081610b1691906111e6565b915050919050565b828054828255906000526020600020908101928215610b97579160200282015b82811115610b965782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3e565b5b509050610ba49190610ba8565b5090565b5b80821115610bc1576000816000905550600101610ba9565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf582610bca565b9050919050565b610c0581610bea565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610bc5565b5b6000610c4c84828501610c13565b91505092915050565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b610c9281610bea565b82525050565b6000602082019050610cad6000830184610c89565b92915050565b6000819050919050565b6000610cd8610cd3610cce84610bca565b610cb3565b610bca565b9050919050565b6000610cea82610cbd565b9050919050565b6000610cfc82610cdf565b9050919050565b610d0c81610cf1565b82525050565b6000602082019050610d276000830184610d03565b92915050565b610d3681610c55565b8114610d4157600080fd5b50565b600081359050610d5381610d2d565b92915050565b600060208284031215610d6f57610d6e610bc5565b5b6000610d7d84828501610d44565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610dcd601383610d86565b9150610dd882610d97565b602082019050919050565b60006020820190508181036000830152610dfc81610dc0565b9050919050565b600081519050610e1281610d2d565b92915050565b600060208284031215610e2e57610e2d610bc5565b5b6000610e3c84828501610e03565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eae82610c55565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ee157610ee0610e74565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f51600b83610d86565b9150610f5c82610f1b565b602082019050919050565b60006020820190508181036000830152610f8081610f44565b9050919050565b600081905092915050565b50565b6000610fa2600083610f87565b9150610fad82610f92565b600082019050919050565b6000610fc382610f95565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611003600b83610d86565b915061100e82610fcd565b602082019050919050565b6000602082019050818103600083015261103281610ff6565b9050919050565b600061104482610c55565b915061104f83610c55565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561108857611087610e74565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110cd82610c55565b91506110d883610c55565b9250826110e8576110e7611093565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611112816110f3565b811461111d57600080fd5b50565b60008151905061112f81611109565b92915050565b6000819050919050565b61114881611135565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b600080600080600060a0868803121561118757611186610bc5565b5b600061119588828901611120565b95505060206111a688828901611156565b94505060406111b788828901610e03565b93505060606111c888828901610e03565b92505060806111d988828901611120565b9150509295509295909350565b60006111f182611135565b91506111fc83611135565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561123b5761123a610e74565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561127857611277610e74565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112b5576112b4610e74565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112f2576112f1610e74565b5b82820290509291505056fea26469706673582212200d908d4557a36671d0f2576c9063359a66c905356e58b066b54ab379d5c6e85764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101b757610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c28565b61031d565b6040516100d79190610c6e565b60405180910390f35b3480156100ec57600080fd5b506100f5610366565b6040516101029190610c6e565b60405180910390f35b34801561011757600080fd5b5061012061040d565b005b34801561012e57600080fd5b5061013761070e565b6040516101449190610c6e565b60405180910390f35b34801561015957600080fd5b5061016261071b565b60405161016f9190610c98565b60405180910390f35b34801561018457600080fd5b5061018d610743565b60405161019a9190610d12565b60405180910390f35b6101ab6101f4565b005b6101b561076d565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610d59565b6109fb565b6040516101eb9190610c98565b60405180910390f35b6802b5e3af16b1880000610233600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a4290919063ffffffff16565b1015610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b90610de3565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d057600080fd5b505afa1580156103e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104089190610e18565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610492576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561053d5760008082815481106104b7576104b6610e45565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061053590610ea3565b915050610495565b50600067ffffffffffffffff81111561055957610558610eec565b5b6040519080825280602002602001820160405280156105875781602001602082028036833780820191505090505b506000908051906020019061059d929190610b1e565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156105e4573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590610f67565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161068490610fb8565b60006040518083038185875af1925050503d80600081146106c1576040519150601f19603f3d011682016040523d82523d6000602084013e6106c6565b606091505b505090508061070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190611019565b60405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561087557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161082b575b5050505050905060005b815181101561090057600082828151811061089d5761089c610e45565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108f890610ea3565b91505061087f565b50600067ffffffffffffffff81111561091c5761091b610eec565b5b60405190808252806020026020018201604052801561094a5781602001602082028036833780820191505090505b5060009080519060200190610960929190610b1e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109a790610fb8565b60006040518083038185875af1925050503d80600081146109e4576040519150601f19603f3d011682016040523d82523d6000602084013e6109e9565b606091505b50509050806109f757600080fd5b5050565b6000808281548110610a1057610a0f610e45565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a4e83610a7e565b90506000670de0b6b3a76400008583610a679190611039565b610a7191906110c2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610ac757600080fd5b505afa158015610adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aff919061116b565b5050509150506402540be40081610b1691906111e6565b915050919050565b828054828255906000526020600020908101928215610b97579160200282015b82811115610b965782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3e565b5b509050610ba49190610ba8565b5090565b5b80821115610bc1576000816000905550600101610ba9565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf582610bca565b9050919050565b610c0581610bea565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610bc5565b5b6000610c4c84828501610c13565b91505092915050565b6000819050919050565b610c6881610c55565b82525050565b6000602082019050610c836000830184610c5f565b92915050565b610c9281610bea565b82525050565b6000602082019050610cad6000830184610c89565b92915050565b6000819050919050565b6000610cd8610cd3610cce84610bca565b610cb3565b610bca565b9050919050565b6000610cea82610cbd565b9050919050565b6000610cfc82610cdf565b9050919050565b610d0c81610cf1565b82525050565b6000602082019050610d276000830184610d03565b92915050565b610d3681610c55565b8114610d4157600080fd5b50565b600081359050610d5381610d2d565b92915050565b600060208284031215610d6f57610d6e610bc5565b5b6000610d7d84828501610d44565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610dcd601383610d86565b9150610dd882610d97565b602082019050919050565b60006020820190508181036000830152610dfc81610dc0565b9050919050565b600081519050610e1281610d2d565b92915050565b600060208284031215610e2e57610e2d610bc5565b5b6000610e3c84828501610e03565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eae82610c55565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ee157610ee0610e74565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f51600b83610d86565b9150610f5c82610f1b565b602082019050919050565b60006020820190508181036000830152610f8081610f44565b9050919050565b600081905092915050565b50565b6000610fa2600083610f87565b9150610fad82610f92565b600082019050919050565b6000610fc382610f95565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611003600b83610d86565b915061100e82610fcd565b602082019050919050565b6000602082019050818103600083015261103281610ff6565b9050919050565b600061104482610c55565b915061104f83610c55565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561108857611087610e74565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110cd82610c55565b91506110d883610c55565b9250826110e8576110e7611093565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611112816110f3565b811461111d57600080fd5b50565b60008151905061112f81611109565b92915050565b6000819050919050565b61114881611135565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b600080600080600060a0868803121561118757611186610bc5565b5b600061119588828901611120565b95505060206111a688828901611156565b94505060406111b788828901610e03565b93505060606111c888828901610e03565b92505060806111d988828901611120565b9150509295509295909350565b60006111f182611135565b91506111fc83611135565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561123b5761123a610e74565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561127857611277610e74565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112b5576112b4610e74565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112f2576112f1610e74565b5b82820290509291505056fea26469706673582212200d908d4557a36671d0f2576c9063359a66c905356e58b066b54ab379d5c6e85764736f6c63430008080033",
  "devdoc": {
    "author": "Quentin Diprima",
    "details": "the implements s_priceFeed as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crownd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}