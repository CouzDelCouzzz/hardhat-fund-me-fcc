{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToamountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9eae83653ba0092ffcd439b2e52edc0fa4c940bd93bc9f0763c22da979b3119e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "919836",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9513017151fb84ea324761b3f2fed281cb2b32dd19ebb231d28b0fc1432ba07f",
    "transactionHash": "0x9eae83653ba0092ffcd439b2e52edc0fa4c940bd93bc9f0763c22da979b3119e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "919836",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "9417290cc783043c56a376dc842a67cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToamountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD -> we will need to use an Oracle\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256; // To use the library\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // To have the 18 decimals\\n\\n    // To keep who is sending money and how much\\n    address[] public funders;\\n    mapping(address => uint256) public addressToamountFunded;\\n\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender; // Who ever deployed this contract\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // We want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract ?\\n\\n        // We accept only if the value sent is more than 1ETH\\n        // if the condition is not met, it will revert\\n        // Revert undo any action before, and send remaining gas back. The only gas used is for the code executed before the \\\"require\\\" statement\\n        // require(msg.value > 1e18, \\\"Didn't send enough!\\\"); // 1e18 = 1ETH\\n        // msg.value will be 18 decimals\\n        //require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough!\\\");\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough!\\\"\\n        ); // We don't need to pass the first parameter as it's implicitly msg.value\\n        funders.push(msg.sender);\\n        addressToamountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        /* starting index; ending index; step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToamountFunded[funder] = 0;\\n        }\\n\\n        // Reset the array\\n        funders = new address[](0);\\n        // Actually withdraw the funds\\n\\n        // There are 3 ways of sending ETh  -> https://solidity-by-example.org/sending-ether/\\n        // 1 - TRANSFER\\n        // msg.sender = address\\n        // paybale(msg.sender) = payable address\\n        payable(msg.sender).transfer(address(this).balance); // if it fails, will return an error and revert the transaction\\n\\n        // 2 - SEND\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n\\n        // 3 - CALL  -> extremlly powerful\\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // So that only the contract's owner can call this function\\n        // require(msg.sender == owner, \\\"Sender is not owner!\\\"); -> The solution just below is more gas efficient\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _; // represents \\\"Do the rest of the code\\\"\\n    }\\n\\n    // What happens if someone sends this contract ETH without calling the fund function ?\\n    // received() -> this special function is called when someone is doing a transaction on our contract without calldata\\n    // fallback() -> this special function is called when someone is doing a transaction on our contract wwith some calldata but it doesn't match a function\\n\\n    // ETH is sent to a contract\\n    //          is msg.data empty ?\\n    //              /   \\\\\\n    //            yes   no\\n    //            /       \\\\\\n    //        receive()?   fallback()\\n    //         /     \\\\\\n    //        yes    no\\n    //        /         \\\\\\n    //    receive()     fallback()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x8a3feacda5a92f0fe689aab4ca6ec76c844805fa640c723000371ce76813d47a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // We need the price of the native token. To do so, we will use Chainlink.\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // We need: -> ABI\\n        // We will use the Interface of the contract. We will import it from Github\\n\\n        // We need: -> Address of the contract -> we can get it from the chainlink website -> https://docs.chain.link/data-feeds/price-feeds/addresses\\n        // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // Will get the ETH price in terms of USD with 8 decimals\\n\\n        return uint256(price * 1e10); // To match with msg.value decimals and variable type\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x32258f6d7e3f23caf1ff1e8aaf7cfbd1f0dad232294a7c2572b72b62b17cd421\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620010bd380380620010bd833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c610f4562000178600039600081816102ec01526106200152610f456000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80632398fa151461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610867565b6102d2565b6040516100c191906108ad565b60405180910390f35b3480156100d657600080fd5b506100df6102ea565b005b3480156100ed57600080fd5b506100f66105eb565b60405161010391906108ad565b60405180910390f35b34801561011857600080fd5b506101216105f8565b60405161012e9190610927565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661061e565b6040516101639190610951565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190610998565b610642565b6040516101a09190610951565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461068190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a22565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041a57600080828154811061039457610393610a42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041290610aa0565b915050610372565b50600067ffffffffffffffff81111561043657610435610ae9565b5b6040519080825280602002602001820160405280156104645781602001602082028036833780820191505090505b506000908051906020019061047a92919061075d565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104c1573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290610b64565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161056190610bb5565b60006040518083038185875af1925050503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b50509050806105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de90610c16565b60405180910390fd5b5050565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061065257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061068d836106bd565b90506000670de0b6b3a764000085836106a69190610c36565b6106b09190610cbf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561070657600080fd5b505afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190610d7d565b5050509150506402540be400816107559190610df8565b915050919050565b8280548282559060005260206000209081019282156107d6579160200282015b828111156107d55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061077d565b5b5090506107e391906107e7565b5090565b5b808211156108005760008160009055506001016107e8565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083482610809565b9050919050565b61084481610829565b811461084f57600080fd5b50565b6000813590506108618161083b565b92915050565b60006020828403121561087d5761087c610804565b5b600061088b84828501610852565b91505092915050565b6000819050919050565b6108a781610894565b82525050565b60006020820190506108c2600083018461089e565b92915050565b6000819050919050565b60006108ed6108e86108e384610809565b6108c8565b610809565b9050919050565b60006108ff826108d2565b9050919050565b6000610911826108f4565b9050919050565b61092181610906565b82525050565b600060208201905061093c6000830184610918565b92915050565b61094b81610829565b82525050565b60006020820190506109666000830184610942565b92915050565b61097581610894565b811461098057600080fd5b50565b6000813590506109928161096c565b92915050565b6000602082840312156109ae576109ad610804565b5b60006109bc84828501610983565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610a0c6013836109c5565b9150610a17826109d6565b602082019050919050565b60006020820190508181036000830152610a3b816109ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aab82610894565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ade57610add610a71565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b4e600b836109c5565b9150610b5982610b18565b602082019050919050565b60006020820190508181036000830152610b7d81610b41565b9050919050565b600081905092915050565b50565b6000610b9f600083610b84565b9150610baa82610b8f565b600082019050919050565b6000610bc082610b92565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c00600b836109c5565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b6000610c4182610894565b9150610c4c83610894565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c8557610c84610a71565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cca82610894565b9150610cd583610894565b925082610ce557610ce4610c90565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d0f81610cf0565b8114610d1a57600080fd5b50565b600081519050610d2c81610d06565b92915050565b6000819050919050565b610d4581610d32565b8114610d5057600080fd5b50565b600081519050610d6281610d3c565b92915050565b600081519050610d778161096c565b92915050565b600080600080600060a08688031215610d9957610d98610804565b5b6000610da788828901610d1d565b9550506020610db888828901610d53565b9450506040610dc988828901610d68565b9350506060610dda88828901610d68565b9250506080610deb88828901610d1d565b9150509295509295909350565b6000610e0382610d32565b9150610e0e83610d32565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4d57610e4c610a71565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8a57610e89610a71565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec757610ec6610a71565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0457610f03610a71565b5b82820290509291505056fea2646970667358221220da0ecf8a096f427bdc40393064487c65ca43d37440ae73bd9d344cc94bf7ba1264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80632398fa151461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610867565b6102d2565b6040516100c191906108ad565b60405180910390f35b3480156100d657600080fd5b506100df6102ea565b005b3480156100ed57600080fd5b506100f66105eb565b60405161010391906108ad565b60405180910390f35b34801561011857600080fd5b506101216105f8565b60405161012e9190610927565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661061e565b6040516101639190610951565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190610998565b610642565b6040516101a09190610951565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461068190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a22565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041a57600080828154811061039457610393610a42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041290610aa0565b915050610372565b50600067ffffffffffffffff81111561043657610435610ae9565b5b6040519080825280602002602001820160405280156104645781602001602082028036833780820191505090505b506000908051906020019061047a92919061075d565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104c1573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290610b64565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161056190610bb5565b60006040518083038185875af1925050503d806000811461059e576040519150601f19603f3d011682016040523d82523d6000602084013e6105a3565b606091505b50509050806105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de90610c16565b60405180910390fd5b5050565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061065257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061068d836106bd565b90506000670de0b6b3a764000085836106a69190610c36565b6106b09190610cbf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561070657600080fd5b505afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190610d7d565b5050509150506402540be400816107559190610df8565b915050919050565b8280548282559060005260206000209081019282156107d6579160200282015b828111156107d55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061077d565b5b5090506107e391906107e7565b5090565b5b808211156108005760008160009055506001016107e8565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061083482610809565b9050919050565b61084481610829565b811461084f57600080fd5b50565b6000813590506108618161083b565b92915050565b60006020828403121561087d5761087c610804565b5b600061088b84828501610852565b91505092915050565b6000819050919050565b6108a781610894565b82525050565b60006020820190506108c2600083018461089e565b92915050565b6000819050919050565b60006108ed6108e86108e384610809565b6108c8565b610809565b9050919050565b60006108ff826108d2565b9050919050565b6000610911826108f4565b9050919050565b61092181610906565b82525050565b600060208201905061093c6000830184610918565b92915050565b61094b81610829565b82525050565b60006020820190506109666000830184610942565b92915050565b61097581610894565b811461098057600080fd5b50565b6000813590506109928161096c565b92915050565b6000602082840312156109ae576109ad610804565b5b60006109bc84828501610983565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610a0c6013836109c5565b9150610a17826109d6565b602082019050919050565b60006020820190508181036000830152610a3b816109ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aab82610894565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ade57610add610a71565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b4e600b836109c5565b9150610b5982610b18565b602082019050919050565b60006020820190508181036000830152610b7d81610b41565b9050919050565b600081905092915050565b50565b6000610b9f600083610b84565b9150610baa82610b8f565b600082019050919050565b6000610bc082610b92565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c00600b836109c5565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b6000610c4182610894565b9150610c4c83610894565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c8557610c84610a71565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cca82610894565b9150610cd583610894565b925082610ce557610ce4610c90565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d0f81610cf0565b8114610d1a57600080fd5b50565b600081519050610d2c81610d06565b92915050565b6000819050919050565b610d4581610d32565b8114610d5057600080fd5b50565b600081519050610d6281610d3c565b92915050565b600081519050610d778161096c565b92915050565b600080600080600060a08688031215610d9957610d98610804565b5b6000610da788828901610d1d565b9550506020610db888828901610d53565b9450506040610dc988828901610d68565b9350506060610dda88828901610d68565b9250506080610deb88828901610d1d565b9150509295509295909350565b6000610e0382610d32565b9150610e0e83610d32565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e4d57610e4c610a71565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e8a57610e89610a71565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ec757610ec6610a71565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0457610f03610a71565b5b82820290509291505056fea2646970667358221220da0ecf8a096f427bdc40393064487c65ca43d37440ae73bd9d344cc94bf7ba1264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToamountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}